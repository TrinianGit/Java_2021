import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


class BusLine implements BusLineInterface{
	
	private Map <String, Pair> BusLinesStartEnd = new HashMap<>();
	private List <PairLinePoints> BusLinesKeyPoints = new ArrayList<>();
	private Map <LineSegment, String> Route2DPositions = new HashMap<>();
	private Map <String, List<Position>> BusLineRoute = new HashMap<>();
	
	
	@Override
	public void addBusLine(String busLineName, Position firstPoint, Position lastPoint) {
		Pair pair = new Pair(firstPoint, lastPoint);
		BusLinesStartEnd.put(busLineName, pair);
	}

	@Override
	public void addLineSegment(String busLineName, LineSegment lineSegment) {
		Pair pair = new Pair(lineSegment.getFirstPosition(), lineSegment.getLastPosition());
		PairLinePoints PLP = new PairLinePoints(busLineName, pair);
		BusLinesKeyPoints.add(PLP);
		CreateIfExists(busLineName);
	}

	@Override
	public void findIntersections() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public Map<String, List<Position>> getLines() {
		return BusLineRoute;
	}

	@Override
	public Map<String, List<Position>> getIntersectionPositions() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Map<String, List<String>> getIntersectionsWithLines() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Map<LinesPair, Set<Position>> getIntersectionOfLinesPair() {
		// TODO Auto-generated method stub
		return null;
	}

	
	
	
	public void CreateIfExists(String BusLineName) {
		if (CheckExistance(BusLineName)) {
			Position Start = BusLinesStartEnd.get(BusLineName).getFirst();
			Position Finish = BusLinesStartEnd.get(BusLineName).getLast();
			Map <Position, Position> BusKeyPositions = new HashMap<>();
			List <Position> BusRoute = new ArrayList<>();
			Position Key = Start;
			for (int i = 0; i < BusLinesKeyPoints.size(); i++) {
				if (BusLinesKeyPoints.get(i).getBusLine() == BusLineName) {
					BusKeyPositions.put(BusLinesKeyPoints.get(i).getPoints().getFirst(), BusLinesKeyPoints.get(i).getPoints().getLast());
				}
			}
			
			while (BusKeyPositions.get(Key) != null) {
				if (Key.getRow() == BusKeyPositions.get(Key).getRow()) {
					if (Key.getCol() > BusKeyPositions.get(Key).getCol()) {
						for (int i = Key.getCol(); i != BusKeyPositions.get(Key).getCol(); i-- ) {
							Position pos = new Position2D (i, Key.getRow());
							BusRoute.add(pos);
						}
					}
					else {
						for (int i = Key.getCol(); i != BusKeyPositions.get(Key).getCol(); i++ ) {
							Position pos = new Position2D (i, Key.getRow());
							BusRoute.add(pos);
						}
					}
				}
				
				else if (Key.getCol() == BusKeyPositions.get(Key).getCol()) {
					if (Key.getRow() > BusKeyPositions.get(Key).getRow()) {
						for (int i = Key.getRow(); i != BusKeyPositions.get(Key).getRow(); i-- ) {
							Position pos = new Position2D (Key.getCol(), i);
							BusRoute.add(pos);
						}
					}
					else {
						for (int i = Key.getRow(); i != BusKeyPositions.get(Key).getRow(); i++ ) {
							Position pos = new Position2D (Key.getCol(), i);
							BusRoute.add(pos);
						}
					}
				}
				
				else if (Key.getRow() > BusKeyPositions.get(Key).getRow()) {
					int k = 0;
					if (Key.getCol() > BusKeyPositions.get(Key).getCol()) {
						for(int i = Key.getRow(); i != BusKeyPositions.get(Key).getRow(); i--) {
							Position pos = new Position2D (Key.getCol()-k, i);
							BusRoute.add(pos);
							k++;
						}
					}
					else {
						for(int i = Key.getRow(); i != BusKeyPositions.get(Key).getRow(); i--) {
							Position pos = new Position2D (Key.getCol()+k, i);
							BusRoute.add(pos);
							k++;
						}
					}
				}
				
				else if (Key.getRow() < BusKeyPositions.get(Key).getRow()) {
					int k = 0;
					if (Key.getCol() > BusKeyPositions.get(Key).getCol()) {
						for(int i = Key.getRow(); i != BusKeyPositions.get(Key).getRow(); i++) {
							Position pos = new Position2D (Key.getCol()-k, i);
							BusRoute.add(pos);
							k++;
						}
					}
					else {
						for(int i = Key.getRow(); i != BusKeyPositions.get(Key).getRow(); i++) {
							Position pos = new Position2D (Key.getCol()+k, i);
							BusRoute.add(pos);
							k++;
						}
					}
				}
				
				Key = BusKeyPositions.get(Key);
				if (BusKeyPositions.get(Key) == null) BusRoute.add(Key);
			}
			
			BusLineRoute.put(BusLineName, BusRoute);
		}
	}
	
	public boolean CheckExistance (String BusLineName) {
		Position Start = BusLinesStartEnd.get(BusLineName).getFirst();
		Position Finish = BusLinesStartEnd.get(BusLineName).getLast();
		Map <Position, Position> BusKeyPositions = new HashMap<>();
		Position Key;
		for (int i = 0; i < BusLinesKeyPoints.size(); i++) {
			if (BusLinesKeyPoints.get(i).getBusLine() == BusLineName) {
				BusKeyPositions.put(BusLinesKeyPoints.get(i).getPoints().getFirst(), BusLinesKeyPoints.get(i).getPoints().getLast());
			}
		}
		
		if (!BusKeyPositions.containsKey(Start) || !BusKeyPositions.containsValue(Finish)) return false;
		
		Key = Start;
		
		while (!BusKeyPositions.get(Key).equals(Finish)) {
			Key = BusKeyPositions.get(Key);
			if (BusKeyPositions.get(Key) == null) return false;
		}
		
		return true;
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	class SegmentLine implements LinesPair{
		
		private String FirstLineName;
		private String SecondLineName;
		
		public SegmentLine(String firstlinename, String secondlinename) {
			FirstLineName = firstlinename;
			SecondLineName = secondlinename;
		}
		
		@Override
		public String getFirstLineName() {
			return FirstLineName;
		}

		@Override
		public String getSecondLineName() {
			return SecondLineName;
		}
		
	}
	
}












class Pair extends BusLine{
	
	private Position First;
	private Position Last;
	
	public Pair (Position first, Position last){
		First = first;
		Last = last;
	}
	
	public Position getFirst(){
		return First;
	}
	
	public Position getLast() {
		return Last;
	}
}

class PairLinePoints extends BusLine{
	
	private String BusLine;
	private Pair Points;
	
	public PairLinePoints (String busline, Pair pair) {
		BusLine = busline;
		Points = pair;
	}
	
	public String getBusLine(){
		return BusLine;
	}
	
	public Pair getPoints() {
		return Points;
	}
}
